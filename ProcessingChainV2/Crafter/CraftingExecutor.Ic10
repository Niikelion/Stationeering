# CraftingExecutor - executes crafting orders
# protocol(-RequestFallback,-CountFallback): d0>recipe d1>count d2<recipe (d2>0                         | d2>machine d2<0) (d0<0 d1<0 | d1>0 d0<0)
# protocol(+RequestFallback,+CountFallback): d0>recipe d1>count d2<recipe (d2>0 d4<count d3<recipe d3>0 | d2>machine d2<0) (d0<0 d1<0 | d1>0 d0<0)
# broadcast: channel1<recipe channel2<count
    alias RecipeRequest d0
    alias RecipeCount d1
    alias RecipeProber d2
    alias RequestFallback d3
    alias CountFallback d4
    alias DeviceSelector d5
    alias RequestItem r15
    alias RequestCount r14
    alias RequestMachine r13
    alias RequestMachineId r12
    alias Crafted r11
    alias OutputStacker r10
    alias Outputted r9
    alias StackSize r8
    alias Remaining r7
    define Out HASH("Output")
waitForRequest:
    yield
    l RequestItem RecipeRequest Setting
    beqz RequestItem waitForRequest # wait for incomming request
    l RequestCount RecipeCount Setting # load count
    jal findMachine
    beqz RequestMachineId handleError
    s db:0 Channel1 RequestItem # machine is ready, activate crafting and watch count
    s db:0 Channel2 RequestCount
    jal fetchStacker
    sd RequestMachineId ClearMemory 1
    sd OutputStacker Mode 1
    move Outputted 0
    move Crafted 0
waitForCrafting:
    yield
    ld Crafted RequestMachineId ExportCount
    sub Remaining RequestCount Outputted
    s db:0 Channel2 Remaining # show remaining count
    jal handleCancel
    jal handleMachine
    jal handleStacker
    bgtz Remaining waitForCrafting # wait for all items to be emitted
    j end
handleError:
    bdns RequestFallback end # send recipe to fallback
    bdns CountFallback end
    s CountFallback Setting RequestCount
    s RequestFallback Setting RequestItem
waitForErrorEnd:
    yield
    l r0 RequestFallback Setting
    bnez r0 waitForErrorEnd # wait for consumption
end:
    s RecipeRequest Setting 0 # finish request
    s RecipeCount Setting 0
    s db:0 Channel1 0
    s db:0 Channel2 0
    j waitForRequest
findMachine:
    s RecipeProber Setting RequestItem
waitForMachine:
    yield
    l RequestMachine RecipeProber Setting
    beq RequestMachine RequestItem waitForMachine
    s RecipeProber Setting 0
    move RequestMachineId 0
    beqz RequestMachine ra
    lb RequestMachineId RequestMachine ReferenceId Minimum
    s DeviceSelector Setting RequestMachine
waitForActive:
    yield
    l r0 DeviceSelector Setting
    bnez r0 waitForActive
    j ra
handleCancel:
    l r0 RecipeCount Setting
    bnez r0 ra
    clrd RequestMachineId
    sd RequestMachineId Activate 0
    sd RequestMachineId Lock 0
    sleep 1
    ld Crafted RequestMachineId ExportCount
    s db:0 Channel2 0
    move r0 RequestCount
    move RequestCount Crafted
waitForCancelOutput:
    yield
    jal handleStacker
    bne Outputted Crafted waitForCancelOutput
    sub RequestCount r0 Crafted
    j handleError
fetchStacker:
    lbn OutputStacker HASH("StructureStacker") Out ReferenceId Minimum
    bnez OutputStacker ra
    lbn OutputStacker HASH("StructureStackerReverse") Out ReferenceId Minimum
    j ra
handleMachine:
    ld r0 RequestMachineId Lock
    bnez r0 ra
    sub r1 RequestCount Crafted
    beqz r1 ra
    sd RequestMachineId Lock 1
    clrd RequestMachineId
    putd RequestMachineId 0 PrinterInstruction.WaitUntilNextValid
    sll r0 RequestItem 16
    min r1 r1 5
    sll r1 r1 8
    or r0 r0 r1
    or r0 r0 PrinterInstruction.ExecuteRecipe
    putd RequestMachineId 1 r0
    putd RequestMachineId 2 PrinterInstruction.DeviceSetLock
    j ra
handleStacker:
    ld r1 OutputStacker PrefabHash
    lbns r0 r1 Out 2 Occupied Minimum
    beqz r0 ra # no item, early return
    lbns StackSize r1 Out 2 MaxQuantity Minimum
    lbns r0 r1 Out 2 Quantity Minimum
    seq r2 StackSize r0
    add r0 Outputted r0
    seq r1 r0 RequestCount
    or r2 r2 r1
    beqz r2 ra
    move Outputted r0
    sd OutputStacker Activate 1
    j ra